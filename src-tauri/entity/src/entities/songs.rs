//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "songs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub song_book_id: Option<i32>,
    pub title: String,
    pub alternate_title: Option<String>,
    pub lyrics: String,
    pub verse_order: Option<String>,
    pub copyright: Option<String>,
    pub comments: Option<String>,
    pub ccli_number: Option<String>,
    pub song_number: Option<String>,
    pub theme_name: Option<String>,
    pub search_title: String,
    pub search_lyrics: String,
    pub create_date: Option<DateTime>,
    pub last_modified: Option<DateTime>,
    pub temporary: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::authors_songs::Entity")]
    AuthorsSongs,
    #[sea_orm(has_many = "super::media_files::Entity")]
    MediaFiles,
    #[sea_orm(
        belongs_to = "super::song_books::Entity",
        from = "Column::SongBookId",
        to = "super::song_books::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SongBooks,
}

impl Related<super::authors_songs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthorsSongs.def()
    }
}

impl Related<super::media_files::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaFiles.def()
    }
}

impl Related<super::song_books::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongBooks.def()
    }
}

impl Related<super::topics::Entity> for Entity {
    fn to() -> RelationDef {
        super::songs_topics::Relation::Topics.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::songs_topics::Relation::Songs.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
